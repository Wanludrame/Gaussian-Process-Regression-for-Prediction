#############################################
## Gaussian Process Regression â€“ RQ Kernel ##
#############################################
## Wanlu Shi ##
###############

####################
## Load Libraries ##
require(MASS)
require(plyr)
require(reshape2)
require(ggplot2)
####################

############################################################################################
## Calculate the Covariance Matrix Sigma Using the Rational Quadratic Covariance Function ##
## Parameters: ##
## x1, x2: vectors ##
## alpha, l > 0: ##
## a scale mixture of SE covariance functions with different characteristic length-scales ##
## Assume sigma_f^2 = 1 ##
## Returns: a covariance matrix ##
CovarianceMatrixRQ <- function(x1, x2, alpha, l) {
  RQKernel <- matrix(rep(0, length(x1) * length(x2)), nrow = length(x1))
  for (i in 1:nrow(RQKernel)) {
    for (j in 1:ncol(RQKernel)) {
      RQKernel[i,j] <- (1 + (x1[i] - x2[j]) ^ 2 / (2 * alpha * l ^ 2)) ^ (-alpha)
    }
  }
  return(RQKernel)
}
############################################################################################

###########################
## Plot Sample Functions ##
## Define the points at which we want to define the functions ##
x.star <- seq(-5, 5, len = 100)
x.star
###########################
PlotValuesRQ <- function(alpha = 100, l = 1, n = 5) {
  Sigma <- CovarianceMatrixRQ(x.star, x.star, alpha, l)
  n.samples <- n
  values <- matrix(rep(0, length(x.star) * n.samples), ncol = n.samples)
  
  ## Set a seed for repeatable plots ##
  set.seed(12345)
  for (i in 1:n.samples) {
    ## Each column represents a sample from a multivariate normal distribution with mean zero and covariance Sigma ##
    values[, i] <- mvrnorm(1, rep(0, length(x.star)), Sigma)
  }
  
  values <- cbind(x = x.star, as.data.frame(values))
  values_melt <- melt(values, id = "x")
  
  ggplot(values_melt, aes(x = x, y = value)) +
    geom_point(aes(color = variable), size = 0.5) +
    theme_bw() +
    scale_y_continuous(lim = c(-2.5, 2.5), name = "output, f(x)") +
    xlab("input, x")
}
## Calculate the covariance matrix with alpha = 100, l = 1 ##
PlotValuesRQ(alpha = 100, l = 1)
## Calculate the covariance matrix with alpha = 100, l = 0.3 ##
PlotValuesRQ(alpha = 100, l = 0.3)
## Calculate the covariance matrix with alpha = 100, l = 3 ##
PlotValuesRQ(alpha = 100, l = 3)
## Calculate the covariance matrix with alpha = 0.1, l = 1 ##
PlotValuesRQ(alpha = 0.1, l = 1)
## Calculate the covariance matrix with alpha = 1, l = 1 ##
PlotValuesRQ(alpha = 1, l = 1)
## Calculate the covariance matrix with alpha = 10, l = 1 ##
PlotValuesRQ(alpha = 10, l = 1)
###########################

##########################################################
## Now let's assume that we have some known data points ##
f <- data.frame(x = c(-4,-3,-1,0,2),
                y = c(-2,0,1,2,-1))
f
##########################################################
## Calculate the covariance matrices using the same x.star values as above ##
## This time we'll plot more samples (n = 100). ##
##########################################################
PlotPriorValues <- function(alpha = 100, l = 1, n = 100) {
  Sigma <- CovarianceMatrixRQ(x.star, x.star, alpha, l)
  n.samples <- n
  values <- matrix(rep(0, length(x.star) * n.samples), ncol = n.samples)
  
  set.seed(12345)
  for (i in 1:n.samples) {
    values[, i] <- mvrnorm(1, rep(0, length(x.star)), Sigma)
  }
  
  values <- cbind(x = x.star, as.data.frame(values))
  values_melt <- melt(values, id = "x")
  
  ggplot(values_melt, aes(x = x, y = value)) +
    geom_line(aes(group = variable), colour = "grey80", size = 0.5) +
    theme_bw() +
    scale_y_continuous(lim = c(-2.5, 2.5), name = "output, f(x)") +
    xlab("input, x")
}

PlotPriorValues(alpha = 100, l = 1, n = 100)
##########################################################
PlotPosteriorValues <- function(alpha = 100, l = 1, n = 100) {
  Sigma <- CovarianceMatrixRQ(x.star, x.star, alpha, l)
  n.samples <- n
  values <- matrix(rep(0, length(x.star) * n.samples), ncol = n.samples)

  x <- f$x
  k.xx <- CovarianceMatrixRQ(x, x, alpha = 100, l = 1)
  k.xxs <- CovarianceMatrixRQ(x, x.star, alpha = 100, l = 1)
  k.xsx <- CovarianceMatrixRQ(x.star, x, alpha = 100, l = 1)
  k.xsxs <- CovarianceMatrixRQ(x.star, x.star, alpha = 100, l = 1)
  
  m.f.star <- k.xsx %*% solve(k.xx) %*% f$y
  cov.f.star <- k.xsxs - k.xsx %*% solve(k.xx) %*% k.xxs
  
  set.seed(12345)
  for (i in 1:n.samples) {
    values[, i] <- mvrnorm(1, m.f.star, cov.f.star)
  }

  values <- cbind(x = x.star, as.data.frame(values))
  values_melt <- melt(values, id = "x")

  ## Plot the results including the mean function and the constraining data points ##
  ggplot() +
    geom_line(data = values_melt, aes(x = x, y = value, group = variable), colour = "grey80", size = 0.5) +
    geom_line(data = NULL, aes(x = x.star, y = m.f.star[, 1]), colour = "gold3", size = 1) +
    geom_point(data = f, aes(x = x, y = y), shape = 3, colour = "black", size = 1.5) +
    theme_bw() +
    scale_y_continuous(lim = c(-3, 3), name = "output, f(x)") +
    xlab("input, x")
}

PlotPosteriorValues(alpha = 100, l = 1, n = 100)
##########################################################

############################################################################################
## Now assume that each of the observed data points have some normally-distributed noise. ##
## Recalulate the sample functions ##
PlotPosteriorValues_Noise <- function(alpha = 100, l = 1, n = 100, sigma.n = sqrt(0.1)) {
  Sigma <- CovarianceMatrixRQ(x.star, x.star, alpha, l)
  n.samples <- n
  values <- matrix(rep(0, length(x.star) * n.samples), ncol = n.samples)
  
  ## Recalculate the mean and covariance functions ##
  m.f.star.n <- k.xsx %*% solve(k.xx + sigma.n ^ 2 * diag(1, ncol(k.xx))) %*% f$y
  cov.f.star.n <- k.xsxs - k.xsx %*% solve(k.xx + sigma.n ^ 2 * diag(1, ncol(k.xx))) %*% k.xxs
  
  set.seed(12345)
  for (i in 1:n.samples) {
    values[, i] <- mvrnorm(1, m.f.star.n, cov.f.star.n)
  }
  
  values <- cbind(x = x.star, as.data.frame(values))
  values_melt <- melt(values, id = "x")
  
  ggplot() +
    geom_line(data = values_melt, aes(x = x, y = value, group = variable), colour = "grey80", size = 0.5) +
    geom_line(data = NULL, aes(x = x.star, y = m.f.star.n[,1]), colour = "purple2", size = 1) +
##  geom_errorbar(data = f, aes(x = x, y = NULL, ymin = y - 2 * sigma.n, ymax = y + 2 * sigma.n), width = 0.2) +
    geom_point(data = f, aes(x = x,y = y), shape = 3, colour = "black", size = 1.5) +
    theme_bw() +
    scale_y_continuous(lim = c(-3, 3), name = "output, f(x)") +
    xlab("input, x")
}

PlotPosteriorValues_Noise(alpha = 100, l = 1, n = 100, sigma.n = sqrt(0.1))
############################################################################################
